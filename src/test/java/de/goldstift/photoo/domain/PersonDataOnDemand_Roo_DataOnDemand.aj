// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.goldstift.photoo.domain;

import de.goldstift.photoo.domain.Person;
import de.goldstift.photoo.repository.PersonRepository;
import de.goldstift.photoo.service.PersonService;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PersonDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PersonDataOnDemand: @Component;
    
    private Random PersonDataOnDemand.rnd = new SecureRandom();
    
    private List<Person> PersonDataOnDemand.data;
    
    @Autowired
    PersonService PersonDataOnDemand.personService;
    
    @Autowired
    PersonRepository PersonDataOnDemand.personRepository;
    
    public Person PersonDataOnDemand.getNewTransientPerson(int index) {
        Person obj = new Person();
        setFirstname(obj, index);
        setLastname(obj, index);
        setNickname(obj, index);
        return obj;
    }
    
    public void PersonDataOnDemand.setFirstname(Person obj, int index) {
        String firstname = "firstname_" + index;
        obj.setFirstname(firstname);
    }
    
    public void PersonDataOnDemand.setLastname(Person obj, int index) {
        String lastname = "lastname_" + index;
        obj.setLastname(lastname);
    }
    
    public void PersonDataOnDemand.setNickname(Person obj, int index) {
        String nickname = "nickname_" + index;
        obj.setNickname(nickname);
    }
    
    public Person PersonDataOnDemand.getSpecificPerson(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Person obj = data.get(index);
        java.lang.Long id = obj.getId();
        return personService.findPerson(id);
    }
    
    public Person PersonDataOnDemand.getRandomPerson() {
        init();
        Person obj = data.get(rnd.nextInt(data.size()));
        java.lang.Long id = obj.getId();
        return personService.findPerson(id);
    }
    
    public boolean PersonDataOnDemand.modifyPerson(Person obj) {
        return false;
    }
    
    public void PersonDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = personService.findPersonEntries(from, to);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Person' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<de.goldstift.photoo.domain.Person>();
        for (int i = 0; i < 10; i++) {
            Person obj = getNewTransientPerson(i);
            try {
                personService.savePerson(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            personRepository.flush();
            data.add(obj);
        }
    }
    
}
