// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.goldstift.photoo.domain;

import de.goldstift.photoo.domain.Folder;
import de.goldstift.photoo.domain.Photo;
import de.goldstift.photoo.repository.PhotoRepository;
import de.goldstift.photoo.service.PhotoService;
import java.lang.Short;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PhotoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PhotoDataOnDemand: @Component;
    
    private Random PhotoDataOnDemand.rnd = new SecureRandom();
    
    private List<Photo> PhotoDataOnDemand.data;
    
    @Autowired
    PhotoService PhotoDataOnDemand.photoService;
    
    @Autowired
    PhotoRepository PhotoDataOnDemand.photoRepository;
    
    public Photo PhotoDataOnDemand.getNewTransientPhoto(int index) {
        Photo obj = new Photo();
        setDescription(obj, index);
        setFolder(obj, index);
        setImportDate(obj, index);
        setOriginalFileName(obj, index);
        setOriginalHeight(obj, index);
        setOriginalWidth(obj, index);
        setShotDate(obj, index);
        setThumbnailFileName(obj, index);
        setTitle(obj, index);
        return obj;
    }
    
    public void PhotoDataOnDemand.setDescription(Photo obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void PhotoDataOnDemand.setFolder(Photo obj, int index) {
        Folder folder = null;
        obj.setFolder(folder);
    }
    
    public void PhotoDataOnDemand.setImportDate(Photo obj, int index) {
        Date importDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setImportDate(importDate);
    }
    
    public void PhotoDataOnDemand.setOriginalFileName(Photo obj, int index) {
        String originalFileName = "originalFileName_" + index;
        obj.setOriginalFileName(originalFileName);
    }
    
    public void PhotoDataOnDemand.setOriginalHeight(Photo obj, int index) {
        Short originalHeight = new Integer(index).shortValue();
        obj.setOriginalHeight(originalHeight);
    }
    
    public void PhotoDataOnDemand.setOriginalWidth(Photo obj, int index) {
        Short originalWidth = new Integer(index).shortValue();
        obj.setOriginalWidth(originalWidth);
    }
    
    public void PhotoDataOnDemand.setShotDate(Photo obj, int index) {
        Date shotDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setShotDate(shotDate);
    }
    
    public void PhotoDataOnDemand.setThumbnailFileName(Photo obj, int index) {
        String thumbnailFileName = "thumbnailFileName_" + index;
        obj.setThumbnailFileName(thumbnailFileName);
    }
    
    public void PhotoDataOnDemand.setTitle(Photo obj, int index) {
        String title = "title_" + index;
        obj.setTitle(title);
    }
    
    public Photo PhotoDataOnDemand.getSpecificPhoto(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Photo obj = data.get(index);
        java.lang.Long id = obj.getId();
        return photoService.findPhoto(id);
    }
    
    public Photo PhotoDataOnDemand.getRandomPhoto() {
        init();
        Photo obj = data.get(rnd.nextInt(data.size()));
        java.lang.Long id = obj.getId();
        return photoService.findPhoto(id);
    }
    
    public boolean PhotoDataOnDemand.modifyPhoto(Photo obj) {
        return false;
    }
    
    public void PhotoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = photoService.findPhotoEntries(from, to);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Photo' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<de.goldstift.photoo.domain.Photo>();
        for (int i = 0; i < 10; i++) {
            Photo obj = getNewTransientPhoto(i);
            try {
                photoService.savePhoto(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            photoRepository.flush();
            data.add(obj);
        }
    }
    
}
