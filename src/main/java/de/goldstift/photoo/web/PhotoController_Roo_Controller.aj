// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.goldstift.photoo.web;

import de.goldstift.photoo.domain.Event;
import de.goldstift.photoo.domain.Person;
import de.goldstift.photoo.domain.Photo;
import de.goldstift.photoo.domain.Tag;
import de.goldstift.photoo.service.EventService;
import de.goldstift.photoo.service.PersonService;
import de.goldstift.photoo.service.PhotoService;
import de.goldstift.photoo.service.TagService;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PhotoController_Roo_Controller {
    
    @Autowired
    PhotoService PhotoController.photoService;
    
    @Autowired
    EventService PhotoController.eventService;
    
    @Autowired
    PersonService PhotoController.personService;
    
    @Autowired
    TagService PhotoController.tagService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String PhotoController.create(@Valid Photo photo, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("photo", photo);
            addDateTimeFormatPatterns(uiModel);
            return "photos/create";
        }
        uiModel.asMap().clear();
        photoService.savePhoto(photo);
        return "redirect:/photos/" + encodeUrlPathSegment(photo.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String PhotoController.createForm(Model uiModel) {
        uiModel.addAttribute("photo", new Photo());
        addDateTimeFormatPatterns(uiModel);
        return "photos/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String PhotoController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("photo", photoService.findPhoto(id));
        uiModel.addAttribute("itemId", id);
        return "photos/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String PhotoController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("photos", photoService.findPhotoEntries(firstResult, sizeNo));
            float nrOfPages = (float) photoService.countAllPhotos() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("photos", photoService.findAllPhotos());
        }
        addDateTimeFormatPatterns(uiModel);
        return "photos/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String PhotoController.update(@Valid Photo photo, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("photo", photo);
            addDateTimeFormatPatterns(uiModel);
            return "photos/update";
        }
        uiModel.asMap().clear();
        photoService.updatePhoto(photo);
        return "redirect:/photos/" + encodeUrlPathSegment(photo.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String PhotoController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("photo", photoService.findPhoto(id));
        addDateTimeFormatPatterns(uiModel);
        return "photos/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String PhotoController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Photo photo = photoService.findPhoto(id);
        photoService.deletePhoto(photo);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/photos";
    }
    
    @ModelAttribute("events")
    public Collection<Event> PhotoController.populateEvents() {
        return eventService.findAllEvents();
    }
    
    @ModelAttribute("people")
    public Collection<Person> PhotoController.populatePeople() {
        return personService.findAllPeople();
    }
    
    @ModelAttribute("photos")
    public Collection<Photo> PhotoController.populatePhotos() {
        return photoService.findAllPhotos();
    }
    
    @ModelAttribute("tags")
    public Collection<Tag> PhotoController.populateTags() {
        return tagService.findAllTags();
    }
    
    void PhotoController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("photo_importdate_date_format", "yyyy-MM-dd HH:mm:ss");
        uiModel.addAttribute("photo_shotdate_date_format", "yyyy-MM-dd HH:mm:ss");
    }
    
    String PhotoController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
